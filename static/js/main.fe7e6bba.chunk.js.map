{"version":3,"sources":["utils/utils.js","Components/Case/Case.js","Components/Line/Line.js","Components/Board/Board.js","Components/Button/Button.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["Utils","isNumber","n","isNaN","parseFloat","square_coordinates","get_row","board","row","get_column","column","col","push","get_square","square","cells","r","c","this","complete_cell","used","possibilities","p","includes","length","compare","expected","actual","array1","slice","array2","sort","every","value","index","is_solved","valid","q","backtrack_based","orig_board","JSON","parse","stringify","c_","Math","floor","random","c_loop","cell","Array","isArray","i","board_2","completed_board","delete_cases","origi_Board","dif","nboard","createStateGrid","grid","gridCopy","returnGrid","line","k","Case","props","onChange","bind","e","boardData","lineIndex","caseIndex","target","onChangeCase","parseInt","borderside","borderbottom","couleur","className","React","Component","Line","cases","taille","Board","lines","Button","changeDifficulty","changeDificulte","id","onClick","onreset","oncreate","difficulte","onshowSolution","App","state","difficulty","showSolution","changeCase","reset","create","boardCopy","console","log","solution","setState","randomBoard","sol","newDif","onLoad","start","useless","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,IAC1I,CAAC,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,IAC1I,CAAC,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,IAC1I,CAAC,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,IAC1I,CAAC,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,IAC1I,CAAC,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,IAC1I,CAAC,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAAG,KAAK,GAAO,CAAC,EAA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","file":"static/js/main.fe7e6bba.chunk.js","sourcesContent":["\r\n//objet avec fonctions utiles pour projet\r\n//importe dans App.js\r\n\r\nconst Utils = {\r\n\r\n  //verifier si une variable est un nombre\r\n  isNumber(n) { return !isNaN(parseFloat(n)) && !isNaN(n - 0) },\r\n\r\n  //pour verifier les carres de 3\r\n  square_coordinates: [\r\n    [1, 1, 1, 2, 2, 2, 3, 3, 3],\r\n    [1, 1, 1, 2, 2, 2, 3, 3, 3],\r\n    [1, 1, 1, 2, 2, 2, 3, 3, 3],\r\n    [4, 4, 4, 5, 5, 5, 6, 6, 6],\r\n    [4, 4, 4, 5, 5, 5, 6, 6, 6],\r\n    [4, 4, 4, 5, 5, 5, 6, 6, 6],\r\n    [7, 7, 7, 8, 8, 8, 9, 9, 9],\r\n    [7, 7, 7, 8, 8, 8, 9, 9, 9],\r\n    [7, 7, 7, 8, 8, 8, 9, 9, 9]\r\n  ],\r\n  \r\n  \r\n  get_row(board, row) {\r\n    // retourne la ligne\r\n    return board[row]\r\n  },\r\n  \r\n  get_column(board, column) {\r\n    // retourne une colonne\r\n    var col = []\r\n    for (let row = 0; row < 9; row++) {\r\n      col.push(board[row][column]);\r\n    }\r\n    return col\r\n  },\r\n  \r\n  get_square(board, square) {\r\n    //recup carre de 3\r\n    let cells = []\r\n    for (let r = 0; r < 9; r++) {\r\n      for (let c = 0; c < 9; c++) {\r\n        if (square === this.square_coordinates[r][c]) {\r\n          cells.push(board[r][c])\r\n        }\r\n      }\r\n    }\r\n    return cells\r\n  },\r\n  \r\n  \r\n  complete_cell(board, r, c) {\r\n    //used liste des valeurs que l'on ne peut pas utiliser dans la case\r\n    let used = [...this.get_row(board, r), ...this.get_column(board, c), ...this.get_square(board, this.square_coordinates[r][c])]\r\n\r\n    let possibilities = []\r\n    //mettre les valeurs qui ne sont pas dans used dans possibilities\r\n    for (let p = 1; p <= 9; p++) {\r\n      if (!used.includes(p)) {\r\n        possibilities.push(p)\r\n      }\r\n    }\r\n    if (possibilities.length === 1) {\r\n      // Si il n'y a qu'une possibilite, la remplire\r\n      board[r][c] = possibilities[0]\r\n      return true\r\n    } else {\r\n      // remplir la case avec la liste de possibilites\r\n      board[r][c] = possibilities\r\n      return false\r\n    }\r\n  },\r\n  \r\n  \r\n  compare(expected, actual) {\r\n    let array1 = expected.slice()\r\n    let array2 = actual.slice()\r\n    return array1.length === array2.length && array1.sort().every(function (value, index) { return value === array2.sort()[index] });\r\n  },\r\n  \r\n  is_solved(board) {\r\n    //verifier si la grille est resolue\r\n\r\n    let expected = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    let valid = true\r\n    // verifier les lignes\r\n    for (let r = 0; r < 9 && valid === true; r++) {\r\n      if (!this.compare(expected, this.get_row(board, r))) {\r\n        valid = false\r\n      }\r\n    }\r\n    // verifier les colonnes\r\n    for (let c = 0; c < 9 && valid === true; c++) {\r\n      if (!this.compare(expected, this.get_column(board, c))) {\r\n        valid = false\r\n      }\r\n    }\r\n    // verifier les carres 3x3\r\n    for (let q = 1; q < 9 && valid === true; q++) {\r\n      if (!this.compare(expected, this.get_square(board, q))) {\r\n        valid = false\r\n      }\r\n    }\r\n    return valid\r\n  },\r\n  \r\n\r\n  \r\n  backtrack_based(orig_board) {\r\n    // creer une board temporaire pour la recursion\r\n    let board = JSON.parse(JSON.stringify(orig_board));\r\n    \r\n    for (let r =0; r < 9; r++) {\r\n      //boucle c commence a chaque fois aleatoirement pour remplire les cases dans des ordres differents et avoir une grille aleatoir\r\n      let c_ = Math.floor(Math.random() * 9);\r\n      for (let c_loop=c_; c_loop < c_+9; c_loop++) {\r\n        let c = c_loop %9\r\n        \r\n\r\n        if (board[r][c] === 0) {\r\n          //essayer de completer la case et verifier si sudoku est fini\r\n          this.complete_cell(board, r, c)\r\n          if (this.is_solved(board)){\r\n            return board;\r\n          }\r\n\r\n          let cell = board[r][c]\r\n\r\n          //si la case n'est pas remplie et est donc une array\r\n          if (Array.isArray(cell)) {\r\n\r\n            //possibilite de choisir valeur aleatoire de la liste de valeurs pour commencer recursion pour plus d'aleatoire en plus de la boucle qui commence par des cases aleatoires\r\n\r\n            for (let i = 0; i < cell.length; i++) {\r\n              // board temporaire pour chaque recursion.\r\n              let board_2 = JSON.parse(JSON.stringify(board));\r\n              // choisir valeur\r\n              board_2[r][c] = cell[i]\r\n              // Recursion avec nouvelle board avec premiere valeur de la liste des possibilites\r\n              let completed_board = this.backtrack_based(board_2)\r\n              if (completed_board) {\r\n                return completed_board\r\n              }\r\n            }\r\n            return false // marche pas\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  },\r\n  \r\n  \r\n  delete_cases(origi_Board, dif) {\r\n    //supprimer des cases de la grille remplie\r\n    let nboard = origi_Board;\r\n    for(let i=0; i<dif;i++) {\r\n      const r = Math.floor(Math.random() * 9)\r\n      const c = Math.floor(Math.random() * 9)\r\n      nboard[r][c] = 0\r\n    }\r\n    return nboard\r\n  },\r\n\r\n\r\n  //create grid for state\r\n  //dont pass argument to create empty grid\r\n  createStateGrid(grid) {\r\n    let gridCopy = grid\r\n    if (!grid){\r\n      gridCopy = [\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      ]\r\n    }\r\n\r\n\r\n    let returnGrid = [];\r\n    for (let i = 0; i<gridCopy.length; i++){\r\n      let line = []\r\n\r\n        for (let k = 0; k<gridCopy[0].length; k++){\r\n            if (gridCopy[i][k] === 0) {\r\n                line.push([gridCopy[i][k], 'b', true]);\r\n            } else {\r\n                line.push([gridCopy[i][k], 'b', false]);\r\n            }\r\n        }  \r\n        returnGrid.push(line)\r\n    }\r\n    return returnGrid;\r\n}\r\n}\r\n\r\nexport default Utils;","import React from 'react';\r\nimport './Case.css'\r\nimport Utils from '../../utils/utils'\r\n\r\nclass Case extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.onChange = this.onChange.bind(this)\r\n    }\r\n\r\n    onChange(e) {\r\n        if (!this.props.boardData[this.props.lineIndex][this.props.caseIndex][2]) {\r\n            return\r\n        }\r\n        //fonction pour changer la valeur des cases dans le state de App.js\r\n        if(e.target.value === ''){\r\n            this.props.onChangeCase(this.props.lineIndex, this.props.caseIndex, '0')\r\n        }\r\n        if(Utils.isNumber(e.target.value)) {\r\n            const value = parseInt(e.target.value)\r\n            if(value<=9 && value>=1){\r\n                this.props.onChangeCase(this.props.lineIndex, this.props.caseIndex, e.target.value)\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let value = this.props.boardData[this.props.lineIndex][this.props.caseIndex][0] !== 0 ? this.props.boardData[this.props.lineIndex][this.props.caseIndex][0] : '';\r\n        //class border\r\n        let borderside;\r\n        let borderbottom;\r\n        if (this.props.lineIndex === 2 || this.props.lineIndex === 5){\r\n            borderbottom = 'bottom'\r\n        }\r\n        if (this.props.caseIndex === 2 || this.props.caseIndex === 5) {\r\n            borderside = 'side'\r\n        }\r\n\r\n\r\n        //classe couleur\r\n        const couleur = this.props.boardData[this.props.lineIndex][this.props.caseIndex][1] === 'b' ? 'black' : 'red';\r\n\r\n        return (\r\n            \r\n            <input className={`case ${borderbottom} ${borderside} ${couleur}`}  onChange={this.onChange} value={value}></input>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Case;","import React from 'react';\r\nimport Case from '../Case/Case'\r\nimport './Line.css'\r\n\r\nclass Line extends React.Component {\r\n    render() {\r\n        let cases = []\r\n        const taille = this.props.taille\r\n        for(let i=0; i<taille; i++) {\r\n            cases.push(<th>\r\n                <Case \r\n                key={i} \r\n                caseIndex={i} \r\n                lineIndex={this.props.lineIndex} \r\n                taille={taille} \r\n                onChangeCase={this.props.onChangeCase} \r\n                boardData={this.props.boardData}/>\r\n                </th>)\r\n        }\r\n\r\n        return (\r\n            cases\r\n        )\r\n    }\r\n}\r\n\r\nexport default Line;","import React from 'react';\r\nimport Line from '../Line/Line'\r\nimport './Board.css'\r\n\r\nclass Board extends React.Component {\r\n    render() {\r\n        let lines = []\r\n        const taille = this.props.taille\r\n        for(let i=0; i<taille; i++) {\r\n            lines.push(<tr>\r\n                <Line \r\n                key={i} \r\n                lineIndex={i} \r\n                taille={taille} \r\n                onChangeCase={this.props.onChangeCase} \r\n                boardData={this.props.boardData}/>\r\n                </tr>)\r\n        }\r\n\r\n        return (\r\n            <table>{lines}</table>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport './Button.css';\r\n\r\nclass Button extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.changeDifficulty = this.changeDifficulty.bind(this);\r\n    }\r\n\r\n    changeDifficulty(e) {\r\n        this.props.changeDificulte(e.target.id === 'ez' ? 30 : e.target.id === 'moyen' ? 50 : 70)\r\n\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id='basics'>\r\n                    <button id='reset' onClick={this.props.onreset}>Reset</button>\r\n                    <button id='create' onClick={this.props.oncreate}>Create</button>\r\n                </div>\r\n                <div id = 'difficulte'>\r\n                    <h1>Difficulte du sudoku: {this.props.difficulte===30?'Ez': this.props.difficulte===50? 'moyen' : 'Dur'}</h1>\r\n                    <button id='ez' className='dif' onClick={this.changeDifficulty}>EZ</button>\r\n                    <button id='moyen' className='dif' onClick={this.changeDifficulty}>Moyen</button>\r\n                    <button id='dur' className='dif' onClick={this.changeDifficulty}>Dur</button>\r\n                </div>\r\n                <button onClick={this.props.onshowSolution} id='solution'>Solution</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport Board from '../Board/Board';\r\nimport Button from '../Button/Button'\r\nimport './App.css'\r\nimport Utils from '../../utils/utils'\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            //representation de la grille\r\n            //1 : nombre ds la grille 2: couleur 3: modifiable\r\n            board: [\r\n                [[0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true]], \r\n                [[0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true]], \r\n                [[0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true]], \r\n                [[0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true]], \r\n                [[0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true]], \r\n                [[0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true]], \r\n                [[0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true]], \r\n                [[0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true]],\r\n                [[0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true], [0, 'b', true]]\r\n            ],\r\n\r\n            //solution board will be created on creation of sudoku\r\n\r\n            //inutile pour l'instant\r\n            taille: 9,\r\n            //nombre de cases a enlever\r\n            difficulty: 50,\r\n            //sudoku fini\r\n            showSolution: false,\r\n        }\r\n        \r\n\r\n        //bind fonctions\r\n        this.changeCase = this.changeCase.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.create = this.create.bind(this);\r\n        this.changeDifficulty = this.changeDifficulty.bind(this);\r\n        this.showSolution = this.showSolution.bind(this);\r\n        //this.start = this.start.bind(this);\r\n    }\r\n\r\n\r\n    //synchroniser app et ecran  toutes les cases changees sont changees ds le state\r\n    changeCase(lineIndex, caseIndex, value) {\r\n        //prendre board et couleur\r\n        const boardCopy = this.state.board;\r\n        console.log(boardCopy)\r\n        //modifier avec nouvelle valeur\r\n        boardCopy[lineIndex][caseIndex][0] = parseInt(value);\r\n\r\n        if (parseInt(value) === 0) {\r\n            boardCopy[lineIndex][caseIndex][1] = 'b'\r\n        } else if (boardCopy[lineIndex][caseIndex][0] === this.state.solution[lineIndex][caseIndex][0]) {\r\n            boardCopy[lineIndex][caseIndex][1] = 'b'\r\n            boardCopy[lineIndex][caseIndex][2] = false\r\n        } else {\r\n            boardCopy[lineIndex][caseIndex][1] = 'r'\r\n        }\r\n        //set nouvelle board\r\n        this.setState(\r\n            {\r\n                board: boardCopy,\r\n            }\r\n        )\r\n    }\r\n\r\n    reset() {\r\n        let board = Utils.createStateGrid()\r\n        //remettre les params au debut\r\n        this.setState(\r\n            {\r\n                board: board,\r\n                solution: board,\r\n                showSolution: false,\r\n                randomBoard: false\r\n            }\r\n        )\r\n    }\r\n\r\n    create() {\r\n        //appeler fonction randomGrid dans utils avec grille base\r\n        //retourne une grille aleatoire remplie\r\n        const sol = Utils.backtrack_based([\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        ])\r\n\r\n        //solution: la grille remplie\r\n        const solution = Utils.createStateGrid(JSON.parse(JSON.stringify(sol)));\r\n\r\n        //supprimer des cases de la grille\r\n        const grid = Utils.createStateGrid(Utils.delete_cases(sol, this.state.difficulty));\r\n\r\n        this.setState({\r\n            board: grid,\r\n            solution: solution,\r\n            showSolution: false,\r\n            randomBoard: true\r\n        });\r\n    }\r\n\r\n    changeDifficulty(newDif) {\r\n        //changer nombre de cases a enlever\r\n        this.setState({\r\n            difficulty: newDif\r\n        })\r\n    }\r\n\r\n    showSolution() {\r\n        if (this.state.randomBoard) {\r\n            this.setState({\r\n                showSolution: true\r\n            })            \r\n        }\r\n    }\r\n\r\n    useless() {\r\n        //passer fonction inutile\r\n        return\r\n    }\r\n\r\n\r\n    /*/\r\n    start() {\r\n        let board = Utils.createStateGrid()\r\n        console.log(board)\r\n\r\n        \r\n        this.setState(\r\n            {started: true,\r\n            board: board}\r\n        )\r\n    }\r\n    va avec bouton ds render\r\n    /*/\r\n\r\n    render() {\r\n\r\n        /*/\r\n        button to get to sudoku\r\n        pas bon \r\n        if (!this.state.started) {\r\n            return (\r\n                <div id='startingdiv'>\r\n                    <div id ='startingButton'>\r\n                        <h1 onClick={this.start} id='startingtext'>Go to Sudoku</h1>\r\n                    </div>\r\n                </div>\r\n\r\n                \r\n            )\r\n        }\r\n        /*/\r\n        return (\r\n            <div id='wrapper' onLoad={() => this.start()}>\r\n                <h1 id='title'>Sudoku</h1>\r\n                <Board \r\n                    taille={this.state.taille} \r\n                    onChangeCase={this.changeCase}\r\n                    boardData={this.state.board}\r\n                />\r\n                {this.state.showSolution === true ? <Board boardData={this.state.solution} onChangeCase={this.useless} taille={this.state.taille} /> : ''}\r\n                <Button \r\n                onreset={this.reset} \r\n                oncreate={this.create} \r\n                difficulte={this.state.difficulty} \r\n                changeDificulte={this.changeDifficulty} \r\n                onshowSolution={this.showSolution} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}