{"version":3,"sources":["utils/utils.js","Components/Case/Case.js","Components/Line/Line.js","Components/Board/Board.js","Components/Button/Button.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["Utils","isNumber","n","isNaN","parseFloat","square_coordinates","get_row","board","row","get_column","column","col","push","get_square","square","cells","r","c","this","complete_cell","used","possibilities","p","includes","length","compare","expected","actual","array1","slice","array2","sort","every","value","index","is_solved","valid","q","backtrack_based","orig_board","JSON","parse","stringify","c_","Math","floor","random","c_loop","cell","Array","isArray","i","board_2","completed_board","randomGrid","grid","delete_cases","origi_Board","dif","nboard","Case","props","onChange","bind","e","target","onChangeCase","lineIndex","caseIndex","parseInt","className","type","min","max","boardData","React","Component","Line","cases","taille","Board","lines","Button","changeDifficulty","changeDificulte","id","onClick","onreset","oncreate","difficulte","class","onshowSolution","App","state","difficulty","solution","showSolution","changeCase","reset","create","boardCopy","setState","randomBoard","sol","console","log","newDif","useless","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd0b4bc6.chunk.js","sourcesContent":["\r\nconst Utils = {\r\n  isNumber(n) { return !isNaN(parseFloat(n)) && !isNaN(n - 0) },\r\n  square_coordinates: [\r\n    [1, 1, 1, 2, 2, 2, 3, 3, 3],\r\n    [1, 1, 1, 2, 2, 2, 3, 3, 3],\r\n    [1, 1, 1, 2, 2, 2, 3, 3, 3],\r\n    [4, 4, 4, 5, 5, 5, 6, 6, 6],\r\n    [4, 4, 4, 5, 5, 5, 6, 6, 6],\r\n    [4, 4, 4, 5, 5, 5, 6, 6, 6],\r\n    [7, 7, 7, 8, 8, 8, 9, 9, 9],\r\n    [7, 7, 7, 8, 8, 8, 9, 9, 9],\r\n    [7, 7, 7, 8, 8, 8, 9, 9, 9]\r\n  ],\r\n  \r\n  \r\n  get_row(board, row) {\r\n    // Given a board, we can return a single row\r\n    return board[row]\r\n  },\r\n  \r\n  get_column(board, column) {\r\n    // Given a board, we iterate the rows to return a column\r\n    var col = []\r\n    for (let row = 0; row < 9; row++) {\r\n      col.push(board[row][column]);\r\n    }\r\n    return col\r\n  },\r\n  \r\n  get_square(board, square) {\r\n    let cells = []\r\n    for (let r = 0; r < 9; r++) {\r\n      for (let c = 0; c < 9; c++) {\r\n        if (square === this.square_coordinates[r][c]) {\r\n          cells.push(board[r][c])\r\n        }\r\n      }\r\n    }\r\n    return cells\r\n  },\r\n  \r\n  \r\n  complete_cell(board, r, c) {\r\n    let used = [...this.get_row(board, r), ...this.get_column(board, c), ...this.get_square(board, this.square_coordinates[r][c])]\r\n    let possibilities = []\r\n    for (let p = 1; p <= 9; p++) {\r\n      if (!used.includes(p)) {\r\n        possibilities.push(p)\r\n      }\r\n    }\r\n    if (possibilities.length === 1) {\r\n      // If there is only one valid possibility, fill it in\r\n      board[r][c] = possibilities[0]\r\n      return true\r\n    } else {\r\n      board[r][c] = possibilities\r\n      return false\r\n    }\r\n  },\r\n  \r\n  \r\n  compare(expected, actual) {\r\n    let array1 = expected.slice()\r\n    let array2 = actual.slice()\r\n    return array1.length === array2.length && array1.sort().every(function (value, index) { return value === array2.sort()[index] });\r\n  },\r\n  \r\n  is_solved(board) {\r\n    let expected = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    let valid = true\r\n    // Check all rows\r\n    for (let r = 0; r < 9 && valid === true; r++) {\r\n      if (!this.compare(expected, this.get_row(board, r))) {\r\n        valid = false\r\n      }\r\n    }\r\n    // Check all columns\r\n    for (let c = 0; c < 9 && valid === true; c++) {\r\n      if (!this.compare(expected, this.get_column(board, c))) {\r\n        valid = false\r\n      }\r\n    }\r\n    // Check all quadrants\r\n    for (let q = 1; q < 9 && valid === true; q++) {\r\n      if (!this.compare(expected, this.get_square(board, q))) {\r\n        valid = false\r\n      }\r\n    }\r\n    return valid\r\n  },\r\n  \r\n\r\n  \r\n  backtrack_based(orig_board) {\r\n    // Create a temporary board for our recursion.\r\n    let board = JSON.parse(JSON.stringify(orig_board));\r\n    if (this.is_solved(board)) {\r\n      board = [\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      ]\r\n    }\r\n    \r\n    for (let r =0; r < 9; r++) {\r\n      let c_ = Math.floor(Math.random() * 9);\r\n      for (let c_loop=c_; c_loop < c_+9; c_loop++) {\r\n        let c = c_loop %9\r\n        \r\n        if (board[r][c] === 0) {\r\n          this.complete_cell(board, r, c)\r\n          if (this.is_solved(board)){\r\n            return board;\r\n          }\r\n          let cell = board[r][c%10]\r\n          if (Array.isArray(cell)) {\r\n            for (let i = 0; i < cell.length; i++) {\r\n              // Create a temporary board for each recursion.\r\n              let board_2 = JSON.parse(JSON.stringify(board));\r\n              // Choose a value\r\n              board_2[r][c] = cell[i]\r\n              // Recurse again using new board\r\n              let completed_board = this.backtrack_based(board_2)\r\n              if (completed_board) {\r\n                return completed_board\r\n              }\r\n            }\r\n            return false // dead end\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  },\r\n  \r\n  \r\n  randomGrid(grid) {\r\n    return this.backtrack_based(grid)\r\n  },\r\n\r\n  \r\n  delete_cases(origi_Board, dif) {\r\n    let nboard = origi_Board;\r\n    for(let i=0; i<dif;i++) {\r\n      const r = Math.floor(Math.random() * 9)\r\n      const c = Math.floor(Math.random() * 9)\r\n      nboard[r][c] = 0\r\n    }\r\n    return nboard\r\n  }\r\n}\r\n\r\nexport default Utils; ","import React from 'react';\r\nimport './Case.css'\r\nimport Utils from '../../utils/utils'\r\n\r\nclass Case extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.onChange = this.onChange.bind(this)\r\n    }\r\n\r\n    onChange(e) {\r\n        if(e.target.value === ''){\r\n            this.props.onChangeCase(this.props.lineIndex, this.props.caseIndex, e.target.value)\r\n        }\r\n        if(Utils.isNumber(e.target.value)) {\r\n            const value = parseInt(e.target.value)\r\n            if(value<=9 && value>=1){\r\n                this.props.onChangeCase(this.props.lineIndex, this.props.caseIndex, e.target.value)\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input className='case' type='number' min='1' max='9' onChange={this.onChange} value={(this.props.boardData[this.props.lineIndex][this.props.caseIndex] !== 0) ? this.props.boardData[this.props.lineIndex][this.props.caseIndex] : ''}></input>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Case;","import React from 'react';\r\nimport Case from '../Case/Case'\r\nimport './Line.css'\r\n\r\nclass Line extends React.Component {\r\n    render() {\r\n        let cases = []\r\n        const taille = this.props.taille\r\n        for(let i=0; i<taille; i++) {\r\n            cases.push(<th><Case key={i} caseIndex={i} lineIndex={this.props.lineIndex} taille={taille} onChangeCase={this.props.onChangeCase} boardData={this.props.boardData}/></th>)\r\n        }\r\n\r\n        return (\r\n            <div>{cases}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Line;","import React from 'react';\r\nimport Line from '../Line/Line'\r\nimport './Board.css'\r\n\r\nclass Board extends React.Component {\r\n    render() {\r\n        let lines = []\r\n        const taille = this.props.taille\r\n        for(let i=0; i<taille; i++) {\r\n            lines.push(<tr><Line key={i} lineIndex={i} taille={taille} onChangeCase={this.props.onChangeCase} boardData={this.props.boardData}/>{}</tr>)\r\n        }\r\n\r\n        return (\r\n            <table>\r\n                {lines}\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport './Button.css';\r\n\r\nclass Button extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.changeDifficulty = this.changeDifficulty.bind(this);\r\n    }\r\n\r\n    changeDifficulty(e) {\r\n        this.props.changeDificulte(e.target.id == 'ez' ? 30 : e.target.id == 'moyen' ? 50 : 70)\r\n\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id='basics'>\r\n                    <button id='reset' onClick={this.props.onreset}>Reset</button>\r\n                    <button id='create' onClick={this.props.oncreate}>Create</button>\r\n                </div>\r\n                <div id = 'difficulte'>\r\n                    <h1>Difficulte du sudoku: {this.props.difficulte===30?'Ez': this.props.difficulte===50? 'moyen' : 'Dur'}</h1>\r\n                    <button id='ez' class='dif' onClick={this.changeDifficulty}>EZ</button>\r\n                    <button id='moyen' class='dif' onClick={this.changeDifficulty}>Moyen</button>\r\n                    <button id='dur' class='dif' onClick={this.changeDifficulty}>Dur</button>\r\n                </div>\r\n                <button onClick={this.props.onshowSolution} id='solution'>Solution</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport Board from '../Board/Board';\r\nimport Button from '../Button/Button'\r\nimport './App.css'\r\nimport Utils from '../../utils/utils'\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            taille: 9,\r\n            board:  [\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n            ],\r\n            difficulty: 50,\r\n            solution:[\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n            ],\r\n            showSolution: false\r\n        }\r\n        \r\n        this.changeCase = this.changeCase.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.create = this.create.bind(this);\r\n        this.changeDifficulty = this.changeDifficulty.bind(this);\r\n        this.showSolution = this.showSolution.bind(this);\r\n    }\r\n\r\n    changeCase(lineIndex, caseIndex, value) {\r\n        const boardCopy = this.state.board;\r\n        boardCopy[lineIndex][caseIndex] = parseInt(value);\r\n        this.setState(\r\n            {\r\n                board: boardCopy\r\n            }\r\n        )\r\n    }\r\n\r\n    reset() {\r\n        this.setState(\r\n            {\r\n                board: [\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                ],\r\n                solution: [\r\n                    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                ],\r\n                showSolution: false,\r\n                randomBoard: false\r\n            }\r\n        )\r\n    }\r\n\r\n    async create() {\r\n        let sol = Utils.randomGrid([\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            ])\r\n        console.log(sol)\r\n        let solution = JSON.parse(JSON.stringify(sol));\r\n        let grid = Utils.delete_cases(sol, this.state.difficulty)\r\n\r\n        this.setState({\r\n            board: grid,\r\n            solution: solution,\r\n            showSolution: false,\r\n            randomBoard: true\r\n        });\r\n    }\r\n\r\n    changeDifficulty(newDif) {\r\n        this.setState({\r\n            difficulty: newDif\r\n        })\r\n    }\r\n\r\n    showSolution() {\r\n        if (this.state.randomBoard) {\r\n            this.setState({\r\n                showSolution: true\r\n            })            \r\n        }\r\n    }\r\n\r\n    useless() {\r\n        return\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='wrapper'>\r\n                <h1 id='title'>Sudoku</h1>\r\n                <Board \r\n                    taille={this.state.taille} \r\n                    onChangeCase={this.changeCase}\r\n                    boardData={this.state.board}\r\n                />\r\n                {this.state.showSolution == true ? <Board boardData={this.state.solution} onChangeCase={this.useless} taille={this.state.taille} /> : ''}\r\n                <Button onreset={this.reset} oncreate={this.create} difficulte={this.state.difficulty} changeDificulte={this.changeDifficulty} onshowSolution={this.showSolution} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}